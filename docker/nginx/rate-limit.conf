# Comprehensive Nginx Rate Limiting Configuration
# Provides infrastructure-level DDoS protection and traffic filtering

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=global:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=orders:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=batch:10m rate=2r/m;
limit_req_zone $binary_remote_addr zone=websocket:10m rate=20r/m;

# Connection limiting zones
limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
limit_conn_zone $server_name zone=conn_per_server:10m;

# Request body size limiting
client_max_body_size 1m;
client_body_buffer_size 128k;
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# Timeout configurations
client_body_timeout 12;
client_header_timeout 12;
keepalive_timeout 15;
send_timeout 10;

# Buffer configurations for DDoS protection
client_body_buffer_size 128K;
client_header_buffer_size 1k;
client_max_body_size 10k;
large_client_header_buffers 2 1k;

# Geo-based rate limiting (example for high-risk countries)
geo $limit_rate_by_country {
    default 0;
    # Block or limit specific countries (example IPs)
    1.2.3.0/24 1;    # Example: limit specific IP ranges
    5.6.7.0/24 1;    # Add actual problematic IP ranges as needed
}

map $limit_rate_by_country $rate_limit_key {
    0 $binary_remote_addr;
    1 $binary_remote_addr;  # Could use different limiting for high-risk
}

# User agent filtering
map $http_user_agent $blocked_agent {
    default 0;
    ~*bot 1;
    ~*crawler 1;
    ~*spider 1;
    ~*scanner 1;
    ~*nmap 1;
    ~*nikto 1;
    ~*sqlmap 1;
    "" 1;  # Block requests without user agent
}

# Suspicious request patterns
map $request_uri $suspicious_request {
    default 0;
    ~*\.(php|asp|aspx|jsp|cgi)$ 1;
    ~*union.*select 1;
    ~*drop.*table 1;
    ~*script.*alert 1;
    ~*\.\./\.\. 1;
    ~*/etc/passwd 1;
    ~*eval\( 1;
    ~*base64_decode 1;
}

# Rate limiting based on request method
map $request_method $rate_limit_method {
    default $binary_remote_addr;
    POST $binary_remote_addr;
    PUT $binary_remote_addr;
    DELETE $binary_remote_addr;
}

# Advanced rate limiting with multiple conditions
map "$remote_addr:$request_uri" $advanced_rate_limit {
    default $binary_remote_addr;
    # Could add specific combinations that need different limits
}

# Log formats for security monitoring
log_format security_log '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       'rate_limited=$request_completion '
                       'country=$geoip_country_code '
                       'real_ip=$realip_remote_addr';

log_format rate_limit_log '$remote_addr - [$time_local] '
                         '"$request" $status '
                         'rate_zone=$rate_zone '
                         'rate_limit_status=$limit_req_status';

# Upstream servers with load balancing and health checks
upstream relayer_backend {
    # Load balancing methods: round_robin (default), ip_hash, least_conn
    least_conn;
    
    # Health check parameters
    server relayer-1:3001 max_fails=3 fail_timeout=30s weight=1;
    server relayer-2:3001 max_fails=3 fail_timeout=30s weight=1;
    server relayer-3:3001 max_fails=3 fail_timeout=30s weight=1 backup;
    
    # Keep alive connections to reduce overhead
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

upstream resolver_backend {
    least_conn;
    
    server resolver-1:3002 max_fails=3 fail_timeout=30s weight=2;
    server resolver-2:3002 max_fails=3 fail_timeout=30s weight=2;
    server resolver-3:3002 max_fails=3 fail_timeout=30s weight=1 backup;
    
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

upstream frontend_backend {
    # Use ip_hash for sticky sessions if needed
    ip_hash;
    
    server frontend-1:3000 max_fails=2 fail_timeout=10s;
    server frontend-2:3000 max_fails=2 fail_timeout=10s;
    
    keepalive 16;
}

# Rate limiting functions
map $request_uri $rate_zone {
    ~^/api/auth/ "auth";
    ~^/api/orders "orders";
    ~^/api/batch "batch";
    ~^/ws "websocket";
    default "api";
}

map $rate_zone $rate_limit_burst {
    "auth" 2;
    "orders" 5;
    "batch" 1;
    "websocket" 10;
    default 20;
}

# Security headers map
map $sent_http_content_type $security_headers {
    default "default";
    ~^text/html "html";
    ~^application/json "json";
}

# Main server block with comprehensive protection
server {
    listen 80;
    listen 443 ssl http2;
    server_name fusion-cross-chain.example.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security headers based on content type
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self' https://fonts.gstatic.com; frame-src 'none'; object-src 'none';" always;
    
    # Real IP configuration for CloudFlare
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    real_ip_header CF-Connecting-IP;
    real_ip_recursive on;
    
    # Connection limiting
    limit_conn conn_per_ip 10;
    limit_conn conn_per_server 1000;
    
    # Global rate limiting
    limit_req zone=global burst=50 nodelay;
    
    # Block suspicious requests
    if ($blocked_agent) {
        return 403 "Blocked User Agent";
    }
    
    if ($suspicious_request) {
        return 403 "Suspicious Request Pattern";
    }
    
    # Block requests without host header
    if ($host = "") {
        return 444;
    }
    
    # Block requests with suspicious headers
    if ($http_x_forwarded_host != "") {
        return 403 "X-Forwarded-Host not allowed";
    }
    
    # Rate limiting for different endpoints
    location /api/auth {
        limit_req zone=auth burst=2 nodelay;
        limit_req_status 429;
        
        # Additional auth-specific headers
        add_header X-Rate-Limit-Zone "auth" always;
        
        proxy_pass http://relayer_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    location /api/orders {
        limit_req zone=orders burst=5 nodelay;
        limit_req_status 429;
        
        add_header X-Rate-Limit-Zone "orders" always;
        
        proxy_pass http://relayer_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    location /api/batch {
        limit_req zone=batch burst=1 nodelay;
        limit_req_status 429;
        
        # Stricter limits for batch operations
        client_max_body_size 5m;
        client_body_timeout 30;
        
        add_header X-Rate-Limit-Zone "batch" always;
        
        proxy_pass http://relayer_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    location /api/resolve {
        limit_req zone=api burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://resolver_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    location /api {
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;
        
        add_header X-Rate-Limit-Zone "api" always;
        
        # Route based on path
        if ($request_uri ~* "^/api/(resolve|bids)") {
            proxy_pass http://resolver_backend;
        }
        
        proxy_pass http://relayer_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    # WebSocket handling with rate limiting
    location /ws {
        limit_req zone=websocket burst=10 nodelay;
        
        # WebSocket upgrade headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        
        proxy_pass http://relayer_backend;
    }
    
    # Static content with caching
    location / {
        limit_req zone=global burst=100 nodelay;
        
        # Security headers for HTML content
        if ($sent_http_content_type ~* "text/html") {
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }
        
        proxy_pass http://frontend_backend;
        include /etc/nginx/proxy_params.conf;
    }
    
    # Health check endpoint (bypasses rate limiting)
    location /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"ok","timestamp":"$time_iso8601"}';
    }
    
    # Nginx status (restricted access)
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
    }
    
    # Block access to sensitive files
    location ~* \.(env|git|svn|htaccess|htpasswd)$ {
        deny all;
        return 404;
    }
    
    # Block PHP and other script files (this is a Node.js app)
    location ~* \.(php|asp|aspx|jsp|cgi|pl)$ {
        return 403 "Script execution not allowed";
    }
    
    # Error pages
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 429 /429.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /403.html {
        root /etc/nginx/html;
        internal;
    }
    
    location = /404.html {
        root /etc/nginx/html;
        internal;
    }
    
    location = /429.html {
        root /etc/nginx/html;
        internal;
        add_header Content-Type "application/json" always;
        return 429 '{"error":"Rate limit exceeded","message":"Too many requests, please try again later","retryAfter":60}';
    }
    
    location = /50x.html {
        root /etc/nginx/html;
        internal;
    }
    
    # Logging
    access_log /var/log/nginx/access.log security_log;
    error_log /var/log/nginx/error.log warn;
}

# HTTP to HTTPS redirect
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

# Rate limit status monitoring endpoint
server {
    listen 8080;
    server_name localhost;
    
    location /rate-limit-status {
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        content_by_lua_block {
            local zones = {"global", "api", "auth", "orders", "batch", "websocket"}
            local status = {}
            
            for _, zone in ipairs(zones) do
                local dict = ngx.shared[zone]
                if dict then
                    status[zone] = {
                        size = dict:get_keys(0),
                        free_space = dict:free_space()
                    }
                end
            end
            
            ngx.header.content_type = "application/json"
            ngx.say(require("cjson").encode({
                timestamp = ngx.time(),
                zones = status,
                connections = {
                    active = ngx.var.connections_active,
                    reading = ngx.var.connections_reading,
                    writing = ngx.var.connections_writing,
                    waiting = ngx.var.connections_waiting
                }
            }))
        }
    }
}