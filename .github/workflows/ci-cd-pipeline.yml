name: CI/CD Pipeline - 1inch Fusion+ Bitcoin Bridge

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci
          cd ../backend && npm ci
          cd ../frontend && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cd contracts && npm audit --audit-level moderate
          cd ../backend && npm audit --audit-level moderate
          cd ../frontend && npm audit --audit-level moderate

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      - name: Check for secrets
        run: |
          # Check for potential secrets in code
          grep -r -i "private.*key.*=" . --exclude-dir=node_modules --exclude-dir=.git || true
          grep -r -i "secret.*=" . --exclude-dir=node_modules --exclude-dir=.git || true

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci
          cd ../backend && npm ci
          cd ../frontend && npm ci

      - name: Run TypeScript checks
        run: |
          npx tsc --noEmit
          cd contracts && npx tsc --noEmit
          cd ../backend && npx tsc --noEmit
          cd ../frontend && npx tsc --noEmit

      - name: Run ESLint
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx
          cd contracts && npx eslint . --ext .ts,.js
          cd ../backend && npx eslint . --ext .ts,.js
          cd ../frontend && npx eslint . --ext .ts,.tsx,.js,.jsx

      - name: Run Prettier check
        run: |
          npx prettier --check .
          cd contracts && npx prettier --check .
          cd ../backend && npx prettier --check .
          cd ../frontend && npx prettier --check .

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        component: [contracts, backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup services (Redis, PostgreSQL)
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: 7

      - name: Start PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '15'
          postgresql db: testdb
          postgresql user: testuser
          postgresql password: testpass

      - name: Install dependencies
        run: |
          npm ci
          cd ${{ matrix.component }} && npm ci

      - name: Build ${{ matrix.component }}
        run: |
          cd ${{ matrix.component }}
          npm run build
        env:
          NODE_ENV: test

      - name: Test ${{ matrix.component }}
        run: |
          cd ${{ matrix.component }}
          npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: testuser
          DB_PASSWORD: testpass
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}
          path: ${{ matrix.component }}/coverage/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci
          cd ../backend && npm ci

      - name: Run configuration validation
        run: node scripts/validate-config.ts

      - name: Run deployment readiness check
        run: node scripts/deployment-readiness.ts staging

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: testdb
          DB_USER: testuser
          DB_PASSWORD: testpass
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [relayer, resolver, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, build-images]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.fusion-bitcoin.1inch.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Deploy infrastructure
        run: ./scripts/infrastructure/deploy-infrastructure.sh -e staging -a apply -f
        env:
          TF_VAR_environment: staging

      - name: Deploy backend services
        run: node scripts/deploy-backend-services.ts staging
        env:
          NODE_ENV: staging
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}

      - name: Deploy frontend
        run: node scripts/deploy-frontend.ts staging
        env:
          NODE_ENV: staging
          VITE_API_URL: https://api.staging.fusion-bitcoin.1inch.io

      - name: Run health checks
        run: ./scripts/infrastructure/health-check.sh -e staging -t all
        
      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, build-images]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://fusion-bitcoin.1inch.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Run deployment readiness check
        run: node scripts/deployment-readiness.ts production
        env:
          NODE_ENV: production
          ETH_PRIVATE_KEY: ${{ secrets.PRODUCTION_ETH_PRIVATE_KEY }}
          BTC_PRIVATE_KEY: ${{ secrets.PRODUCTION_BTC_PRIVATE_KEY }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}

      - name: Create deployment backup
        run: |
          mkdir -p backups/pre-deployment
          kubectl get all -n fusion-bitcoin > backups/pre-deployment/k8s-resources.yaml || true
          
      - name: Deploy infrastructure
        run: ./scripts/infrastructure/deploy-infrastructure.sh -e production -a apply
        env:
          TF_VAR_environment: production

      - name: Deploy contracts (if needed)
        run: |
          cd contracts
          npm run deploy:production
        env:
          ETH_PRIVATE_KEY: ${{ secrets.PRODUCTION_ETH_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Deploy backend services
        run: node scripts/deploy-backend-services.ts production
        env:
          NODE_ENV: production
          DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
          DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          ETH_PRIVATE_KEY: ${{ secrets.PRODUCTION_ETH_PRIVATE_KEY }}
          BTC_PRIVATE_KEY: ${{ secrets.PRODUCTION_BTC_PRIVATE_KEY }}

      - name: Deploy frontend
        run: node scripts/deploy-frontend.ts production
        env:
          NODE_ENV: production
          VITE_API_URL: https://api.fusion-bitcoin.1inch.io

      - name: Run comprehensive health checks
        run: ./scripts/infrastructure/health-check.sh -e production -t all -w 60
        
      - name: Run post-deployment validation
        run: npm run validate:production
        env:
          NODE_ENV: production

      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Production deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback Job (manual trigger)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    needs: [deploy-production]
    environment:
      name: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Execute emergency rollback
        run: ./scripts/rollback.sh --emergency --service all
        env:
          ENVIRONMENT: production

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Emergency rollback executed for production deployment",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup old artifacts and images
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
                return ageInDays > 30;
              });
              
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

      - name: Cleanup old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-relayer
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true