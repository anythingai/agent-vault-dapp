/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RateLimitedEscrowFactory {
  export type CircuitBreakerStruct = {
    isOpen: boolean;
    failureCount: BigNumberish;
    lastFailureTime: BigNumberish;
    openedAt: BigNumberish;
    successCount: BigNumberish;
    totalRequests: BigNumberish;
  };

  export type CircuitBreakerStructOutput = [
    isOpen: boolean,
    failureCount: bigint,
    lastFailureTime: bigint,
    openedAt: bigint,
    successCount: bigint,
    totalRequests: bigint
  ] & {
    isOpen: boolean;
    failureCount: bigint;
    lastFailureTime: bigint;
    openedAt: bigint;
    successCount: bigint;
    totalRequests: bigint;
  };

  export type UserRateLimitStruct = {
    requestCount: BigNumberish;
    lastRequestTime: BigNumberish;
    windowStart: BigNumberish;
    penaltyLevel: BigNumberish;
    blockedUntil: BigNumberish;
    totalGasUsed: BigNumberish;
    gasWindowStart: BigNumberish;
  };

  export type UserRateLimitStructOutput = [
    requestCount: bigint,
    lastRequestTime: bigint,
    windowStart: bigint,
    penaltyLevel: bigint,
    blockedUntil: bigint,
    totalGasUsed: bigint,
    gasWindowStart: bigint
  ] & {
    requestCount: bigint;
    lastRequestTime: bigint;
    windowStart: bigint;
    penaltyLevel: bigint;
    blockedUntil: bigint;
    totalGasUsed: bigint;
    gasWindowStart: bigint;
  };

  export type RateLimitConfigStruct = {
    maxRequestsPerWindow: BigNumberish;
    windowDuration: BigNumberish;
    cooldownPeriod: BigNumberish;
    maxGasPerWindow: BigNumberish;
    gasWindowDuration: BigNumberish;
    penaltyMultiplier: BigNumberish;
    maxPenaltyLevel: BigNumberish;
    maxBatchSize: BigNumberish;
  };

  export type RateLimitConfigStructOutput = [
    maxRequestsPerWindow: bigint,
    windowDuration: bigint,
    cooldownPeriod: bigint,
    maxGasPerWindow: bigint,
    gasWindowDuration: bigint,
    penaltyMultiplier: bigint,
    maxPenaltyLevel: bigint,
    maxBatchSize: bigint
  ] & {
    maxRequestsPerWindow: bigint;
    windowDuration: bigint;
    cooldownPeriod: bigint;
    maxGasPerWindow: bigint;
    gasWindowDuration: bigint;
    penaltyMultiplier: bigint;
    maxPenaltyLevel: bigint;
    maxBatchSize: bigint;
  };
}

export interface RateLimitedEscrowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToBlacklist"
      | "addToWhitelist"
      | "batchCreateEscrows"
      | "blacklist"
      | "canMakeRequest"
      | "circuitBreakers"
      | "createEscrowDst"
      | "createEscrowDstInternal"
      | "createEscrowSrc"
      | "createEscrowSrcInternal"
      | "emergencyStop"
      | "emergencyWithdraw"
      | "escrowDstImplementation"
      | "escrowSrcImplementation"
      | "escrows"
      | "getCircuitBreakerStatus"
      | "getEscrowAddress"
      | "getEscrowDstAddress"
      | "getEscrowSrcAddress"
      | "getFactoryStats"
      | "getUserRateLimit"
      | "globalGasUsed"
      | "globalRequestCount"
      | "isEscrow"
      | "lastGlobalReset"
      | "maximumTimelock"
      | "minimumSafetyDeposit"
      | "minimumTimelock"
      | "owner"
      | "paused"
      | "rateLimitConfig"
      | "removeFromBlacklist"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "resetUserRateLimit"
      | "setCircuitBreaker"
      | "setEmergencyStop"
      | "setPaused"
      | "totalBlockedUsers"
      | "totalEscrowsCreated"
      | "totalValueLocked"
      | "totalViolations"
      | "transferOwnership"
      | "updateConfig"
      | "updateRateLimitConfig"
      | "userRateLimits"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CircuitBreakerTriggered"
      | "EmergencyStop"
      | "EscrowDstCreated"
      | "EscrowSrcCreated"
      | "OwnershipTransferred"
      | "Paused"
      | "RateLimitViolation"
      | "Unpaused"
      | "UserBlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreateEscrows",
    values: [
      BytesLike[],
      AddressLike[],
      BigNumberish[],
      AddressLike[],
      AddressLike[],
      BytesLike[],
      BigNumberish[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canMakeRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "circuitBreakers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowDst",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowDstInternal",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowSrc",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowSrcInternal",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowDstImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowSrcImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCircuitBreakerStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowDstAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowSrcAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRateLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalGasUsed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalRequestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEscrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastGlobalReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSafetyDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateLimitConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetUserRateLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreaker",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyStop",
    values: [boolean, string]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "totalBlockedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEscrowsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalViolations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRateLimitConfig",
    values: [RateLimitedEscrowFactory.RateLimitConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "userRateLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCreateEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canMakeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circuitBreakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowDst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowDstInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowSrc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowSrcInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowDstImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowSrcImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitBreakerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowDstAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowSrcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalGasUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastGlobalReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSafetyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetUserRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBlockedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEscrowsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalViolations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRateLimitConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRateLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace CircuitBreakerTriggeredEvent {
  export type InputTuple = [
    breakerName: string,
    timestamp: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    breakerName: string,
    timestamp: bigint,
    reason: string
  ];
  export interface OutputObject {
    breakerName: string;
    timestamp: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyStopEvent {
  export type InputTuple = [
    admin: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [admin: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowDstCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    escrowAddress: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    escrowAddress: string,
    token: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    orderId: string;
    escrowAddress: string;
    token: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowSrcCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    escrowAddress: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    escrowAddress: string,
    token: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    orderId: string;
    escrowAddress: string;
    token: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateLimitViolationEvent {
  export type InputTuple = [
    user: AddressLike,
    violationType: string,
    timestamp: BigNumberish,
    penaltyLevel: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    violationType: string,
    timestamp: bigint,
    penaltyLevel: bigint
  ];
  export interface OutputObject {
    user: string;
    violationType: string;
    timestamp: bigint;
    penaltyLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlockedEvent {
  export type InputTuple = [
    user: AddressLike,
    blockedUntil: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    user: string,
    blockedUntil: bigint,
    reason: string
  ];
  export interface OutputObject {
    user: string;
    blockedUntil: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RateLimitedEscrowFactory extends BaseContract {
  contractName: "RateLimitedEscrowFactory";

  connect(runner?: ContractRunner | null): RateLimitedEscrowFactory;
  waitForDeployment(): Promise<this>;

  interface: RateLimitedEscrowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToBlacklist: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  addToWhitelist: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  batchCreateEscrows: TypedContractMethod<
    [
      orderIds: BytesLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      depositors: AddressLike[],
      withdrawers: AddressLike[],
      secretHashes: BytesLike[],
      timelocks: BigNumberish[],
      isSource: boolean[]
    ],
    [string[]],
    "payable"
  >;

  blacklist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  canMakeRequest: TypedContractMethod<
    [user: AddressLike],
    [[boolean, string]],
    "view"
  >;

  circuitBreakers: TypedContractMethod<
    [arg0: string],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        isOpen: boolean;
        failureCount: bigint;
        lastFailureTime: bigint;
        openedAt: bigint;
        successCount: bigint;
        totalRequests: bigint;
      }
    ],
    "view"
  >;

  createEscrowDst: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  createEscrowDstInternal: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  createEscrowSrc: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  createEscrowSrcInternal: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  emergencyStop: TypedContractMethod<[], [boolean], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  escrowDstImplementation: TypedContractMethod<[], [string], "view">;

  escrowSrcImplementation: TypedContractMethod<[], [string], "view">;

  escrows: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getCircuitBreakerStatus: TypedContractMethod<
    [breakerName: string],
    [RateLimitedEscrowFactory.CircuitBreakerStructOutput],
    "view"
  >;

  getEscrowAddress: TypedContractMethod<[orderId: BytesLike], [string], "view">;

  getEscrowDstAddress: TypedContractMethod<
    [orderId: BytesLike],
    [string],
    "view"
  >;

  getEscrowSrcAddress: TypedContractMethod<
    [orderId: BytesLike],
    [string],
    "view"
  >;

  getFactoryStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        _totalEscrowsCreated: bigint;
        _totalValueLocked: bigint;
        _totalViolations: bigint;
        _totalBlockedUsers: bigint;
        _globalRequestCount: bigint;
        _globalGasUsed: bigint;
        _emergencyStopActive: boolean;
      }
    ],
    "view"
  >;

  getUserRateLimit: TypedContractMethod<
    [user: AddressLike],
    [RateLimitedEscrowFactory.UserRateLimitStructOutput],
    "view"
  >;

  globalGasUsed: TypedContractMethod<[], [bigint], "view">;

  globalRequestCount: TypedContractMethod<[], [bigint], "view">;

  isEscrow: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastGlobalReset: TypedContractMethod<[], [bigint], "view">;

  maximumTimelock: TypedContractMethod<[], [bigint], "view">;

  minimumSafetyDeposit: TypedContractMethod<[], [bigint], "view">;

  minimumTimelock: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rateLimitConfig: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        maxRequestsPerWindow: bigint;
        windowDuration: bigint;
        cooldownPeriod: bigint;
        maxGasPerWindow: bigint;
        gasWindowDuration: bigint;
        penaltyMultiplier: bigint;
        maxPenaltyLevel: bigint;
        maxBatchSize: bigint;
      }
    ],
    "view"
  >;

  removeFromBlacklist: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFromWhitelist: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetUserRateLimit: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  setCircuitBreaker: TypedContractMethod<
    [breakerName: string, isOpen: boolean],
    [void],
    "nonpayable"
  >;

  setEmergencyStop: TypedContractMethod<
    [stop: boolean, reason: string],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  totalBlockedUsers: TypedContractMethod<[], [bigint], "view">;

  totalEscrowsCreated: TypedContractMethod<[], [bigint], "view">;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  totalViolations: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [
      _minimumSafetyDeposit: BigNumberish,
      _maximumTimelock: BigNumberish,
      _minimumTimelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateRateLimitConfig: TypedContractMethod<
    [newConfig: RateLimitedEscrowFactory.RateLimitConfigStruct],
    [void],
    "nonpayable"
  >;

  userRateLimits: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        requestCount: bigint;
        lastRequestTime: bigint;
        windowStart: bigint;
        penaltyLevel: bigint;
        blockedUntil: bigint;
        totalGasUsed: bigint;
        gasWindowStart: bigint;
      }
    ],
    "view"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToBlacklist"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchCreateEscrows"
  ): TypedContractMethod<
    [
      orderIds: BytesLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      depositors: AddressLike[],
      withdrawers: AddressLike[],
      secretHashes: BytesLike[],
      timelocks: BigNumberish[],
      isSource: boolean[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canMakeRequest"
  ): TypedContractMethod<[user: AddressLike], [[boolean, string]], "view">;
  getFunction(
    nameOrSignature: "circuitBreakers"
  ): TypedContractMethod<
    [arg0: string],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        isOpen: boolean;
        failureCount: bigint;
        lastFailureTime: bigint;
        openedAt: bigint;
        successCount: bigint;
        totalRequests: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createEscrowDst"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEscrowDstInternal"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEscrowSrc"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEscrowSrcInternal"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyStop"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowDstImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrowSrcImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getCircuitBreakerStatus"
  ): TypedContractMethod<
    [breakerName: string],
    [RateLimitedEscrowFactory.CircuitBreakerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowDstAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowSrcAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFactoryStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        _totalEscrowsCreated: bigint;
        _totalValueLocked: bigint;
        _totalViolations: bigint;
        _totalBlockedUsers: bigint;
        _globalRequestCount: bigint;
        _globalGasUsed: bigint;
        _emergencyStopActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRateLimit"
  ): TypedContractMethod<
    [user: AddressLike],
    [RateLimitedEscrowFactory.UserRateLimitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalGasUsed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalRequestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEscrow"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastGlobalReset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumSafetyDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rateLimitConfig"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        maxRequestsPerWindow: bigint;
        windowDuration: bigint;
        cooldownPeriod: bigint;
        maxGasPerWindow: bigint;
        gasWindowDuration: bigint;
        penaltyMultiplier: bigint;
        maxPenaltyLevel: bigint;
        maxBatchSize: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetUserRateLimit"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCircuitBreaker"
  ): TypedContractMethod<
    [breakerName: string, isOpen: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyStop"
  ): TypedContractMethod<[stop: boolean, reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBlockedUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEscrowsCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalViolations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      _minimumSafetyDeposit: BigNumberish,
      _maximumTimelock: BigNumberish,
      _minimumTimelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRateLimitConfig"
  ): TypedContractMethod<
    [newConfig: RateLimitedEscrowFactory.RateLimitConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRateLimits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        requestCount: bigint;
        lastRequestTime: bigint;
        windowStart: bigint;
        penaltyLevel: bigint;
        blockedUntil: bigint;
        totalGasUsed: bigint;
        gasWindowStart: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "CircuitBreakerTriggered"
  ): TypedContractEvent<
    CircuitBreakerTriggeredEvent.InputTuple,
    CircuitBreakerTriggeredEvent.OutputTuple,
    CircuitBreakerTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyStop"
  ): TypedContractEvent<
    EmergencyStopEvent.InputTuple,
    EmergencyStopEvent.OutputTuple,
    EmergencyStopEvent.OutputObject
  >;
  getEvent(
    key: "EscrowDstCreated"
  ): TypedContractEvent<
    EscrowDstCreatedEvent.InputTuple,
    EscrowDstCreatedEvent.OutputTuple,
    EscrowDstCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowSrcCreated"
  ): TypedContractEvent<
    EscrowSrcCreatedEvent.InputTuple,
    EscrowSrcCreatedEvent.OutputTuple,
    EscrowSrcCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RateLimitViolation"
  ): TypedContractEvent<
    RateLimitViolationEvent.InputTuple,
    RateLimitViolationEvent.OutputTuple,
    RateLimitViolationEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserBlocked"
  ): TypedContractEvent<
    UserBlockedEvent.InputTuple,
    UserBlockedEvent.OutputTuple,
    UserBlockedEvent.OutputObject
  >;

  filters: {
    "CircuitBreakerTriggered(string,uint256,string)": TypedContractEvent<
      CircuitBreakerTriggeredEvent.InputTuple,
      CircuitBreakerTriggeredEvent.OutputTuple,
      CircuitBreakerTriggeredEvent.OutputObject
    >;
    CircuitBreakerTriggered: TypedContractEvent<
      CircuitBreakerTriggeredEvent.InputTuple,
      CircuitBreakerTriggeredEvent.OutputTuple,
      CircuitBreakerTriggeredEvent.OutputObject
    >;

    "EmergencyStop(address,string,uint256)": TypedContractEvent<
      EmergencyStopEvent.InputTuple,
      EmergencyStopEvent.OutputTuple,
      EmergencyStopEvent.OutputObject
    >;
    EmergencyStop: TypedContractEvent<
      EmergencyStopEvent.InputTuple,
      EmergencyStopEvent.OutputTuple,
      EmergencyStopEvent.OutputObject
    >;

    "EscrowDstCreated(bytes32,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      EscrowDstCreatedEvent.InputTuple,
      EscrowDstCreatedEvent.OutputTuple,
      EscrowDstCreatedEvent.OutputObject
    >;
    EscrowDstCreated: TypedContractEvent<
      EscrowDstCreatedEvent.InputTuple,
      EscrowDstCreatedEvent.OutputTuple,
      EscrowDstCreatedEvent.OutputObject
    >;

    "EscrowSrcCreated(bytes32,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      EscrowSrcCreatedEvent.InputTuple,
      EscrowSrcCreatedEvent.OutputTuple,
      EscrowSrcCreatedEvent.OutputObject
    >;
    EscrowSrcCreated: TypedContractEvent<
      EscrowSrcCreatedEvent.InputTuple,
      EscrowSrcCreatedEvent.OutputTuple,
      EscrowSrcCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RateLimitViolation(address,string,uint256,uint256)": TypedContractEvent<
      RateLimitViolationEvent.InputTuple,
      RateLimitViolationEvent.OutputTuple,
      RateLimitViolationEvent.OutputObject
    >;
    RateLimitViolation: TypedContractEvent<
      RateLimitViolationEvent.InputTuple,
      RateLimitViolationEvent.OutputTuple,
      RateLimitViolationEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserBlocked(address,uint256,string)": TypedContractEvent<
      UserBlockedEvent.InputTuple,
      UserBlockedEvent.OutputTuple,
      UserBlockedEvent.OutputObject
    >;
    UserBlocked: TypedContractEvent<
      UserBlockedEvent.InputTuple,
      UserBlockedEvent.OutputTuple,
      UserBlockedEvent.OutputObject
    >;
  };
}
