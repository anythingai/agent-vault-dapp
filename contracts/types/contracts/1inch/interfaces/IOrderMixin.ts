/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOrderMixin {
  export type OrderStruct = {
    salt: BigNumberish;
    maker: AddressLike;
    receiver: AddressLike;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    makerTraits: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    maker: string,
    receiver: string,
    makerAsset: string,
    takerAsset: string,
    makingAmount: bigint,
    takingAmount: bigint,
    makerTraits: bigint
  ] & {
    salt: bigint;
    maker: string;
    receiver: string;
    makerAsset: string;
    takerAsset: string;
    makingAmount: bigint;
    takingAmount: bigint;
    makerTraits: bigint;
  };
}

export interface IOrderMixinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "cancelOrder"
      | "fillOrder"
      | "fillOrderArgs"
      | "hashOrder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OrderCanceled" | "OrderFilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [IOrderMixin.OrderStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
}

export namespace OrderCanceledEvent {
  export type InputTuple = [
    maker: AddressLike,
    orderHash: BytesLike,
    makerTraits: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    orderHash: string,
    makerTraits: bigint
  ];
  export interface OutputObject {
    maker: string;
    orderHash: string;
    makerTraits: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    makingAmount: BigNumberish,
    takingAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    makingAmount: bigint,
    takingAmount: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    makingAmount: bigint;
    takingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrderMixin extends BaseContract {
  contractName: "IOrderMixin";

  connect(runner?: ContractRunner | null): IOrderMixin;
  waitForDeployment(): Promise<this>;

  interface: IOrderMixinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  cancelOrder: TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  fillOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  fillOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  hashOrder: TypedContractMethod<
    [order: IOrderMixin.OrderStruct],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<[order: IOrderMixin.OrderStruct], [string], "view">;

  getEvent(
    key: "OrderCanceled"
  ): TypedContractEvent<
    OrderCanceledEvent.InputTuple,
    OrderCanceledEvent.OutputTuple,
    OrderCanceledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;

  filters: {
    "OrderCanceled(address,bytes32,uint256)": TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;
    OrderCanceled: TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;

    "OrderFilled(bytes32,uint256,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
  };
}
