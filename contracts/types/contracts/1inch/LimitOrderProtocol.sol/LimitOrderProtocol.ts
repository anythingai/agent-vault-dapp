/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOrderMixin {
  export type OrderStruct = {
    salt: BigNumberish;
    maker: AddressLike;
    receiver: AddressLike;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    makerTraits: BigNumberish;
  };

  export type OrderStructOutput = [
    salt: bigint,
    maker: string,
    receiver: string,
    makerAsset: string,
    takerAsset: string,
    makingAmount: bigint,
    takingAmount: bigint,
    makerTraits: bigint
  ] & {
    salt: bigint;
    maker: string;
    receiver: string;
    makerAsset: string;
    takerAsset: string;
    makingAmount: bigint;
    takingAmount: bigint;
    makerTraits: bigint;
  };
}

export interface LimitOrderProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "ORDER_TYPEHASH"
      | "bitInvalidatorForOrder"
      | "cancelOrder"
      | "cancelledOrders"
      | "eip712Domain"
      | "emergencyWithdraw"
      | "escrowFactory"
      | "fillOrder"
      | "fillOrderArgs"
      | "getEscrowForOrder"
      | "hashOrder"
      | "isOrderProcessed"
      | "isProcessedOrder"
      | "orderToEscrow"
      | "owner"
      | "pause"
      | "paused"
      | "remainingInvalidatorForOrder"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "EscrowCreatedForOrder"
      | "OrderCanceled"
      | "OrderFilled"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bitInvalidatorForOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderArgs",
    values: [
      IOrderMixin.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowForOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [IOrderMixin.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderProcessed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProcessedOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderToEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingInvalidatorForOrder",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOrderProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProcessedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderToEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedForOrderEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    escrowAddress: AddressLike,
    maker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    escrowAddress: string,
    maker: string,
    amount: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    escrowAddress: string;
    maker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCanceledEvent {
  export type InputTuple = [
    maker: AddressLike,
    orderHash: BytesLike,
    makerTraits: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    orderHash: string,
    makerTraits: bigint
  ];
  export interface OutputObject {
    maker: string;
    orderHash: string;
    makerTraits: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    makingAmount: BigNumberish,
    takingAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    makingAmount: bigint,
    takingAmount: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    makingAmount: bigint;
    takingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LimitOrderProtocol extends BaseContract {
  contractName: "LimitOrderProtocol";

  connect(runner?: ContractRunner | null): LimitOrderProtocol;
  waitForDeployment(): Promise<this>;

  interface: LimitOrderProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  bitInvalidatorForOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  cancelOrder: TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelledOrders: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  escrowFactory: TypedContractMethod<[], [string], "view">;

  fillOrder: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  fillOrderArgs: TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  getEscrowForOrder: TypedContractMethod<
    [orderHash: BytesLike],
    [string],
    "view"
  >;

  hashOrder: TypedContractMethod<
    [order: IOrderMixin.OrderStruct],
    [string],
    "view"
  >;

  isOrderProcessed: TypedContractMethod<
    [orderHash: BytesLike],
    [boolean],
    "view"
  >;

  isProcessedOrder: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  orderToEscrow: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  remainingInvalidatorForOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bitInvalidatorForOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [makerTraits: BigNumberish, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelledOrders"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderArgs"
  ): TypedContractMethod<
    [
      order: IOrderMixin.OrderStruct,
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      args: BytesLike
    ],
    [
      [bigint, bigint, string] & {
        makingAmount: bigint;
        takingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getEscrowForOrder"
  ): TypedContractMethod<[orderHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<[order: IOrderMixin.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "isOrderProcessed"
  ): TypedContractMethod<[orderHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isProcessedOrder"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "orderToEscrow"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "remainingInvalidatorForOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreatedForOrder"
  ): TypedContractEvent<
    EscrowCreatedForOrderEvent.InputTuple,
    EscrowCreatedForOrderEvent.OutputTuple,
    EscrowCreatedForOrderEvent.OutputObject
  >;
  getEvent(
    key: "OrderCanceled"
  ): TypedContractEvent<
    OrderCanceledEvent.InputTuple,
    OrderCanceledEvent.OutputTuple,
    OrderCanceledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EscrowCreatedForOrder(bytes32,address,address,uint256)": TypedContractEvent<
      EscrowCreatedForOrderEvent.InputTuple,
      EscrowCreatedForOrderEvent.OutputTuple,
      EscrowCreatedForOrderEvent.OutputObject
    >;
    EscrowCreatedForOrder: TypedContractEvent<
      EscrowCreatedForOrderEvent.InputTuple,
      EscrowCreatedForOrderEvent.OutputTuple,
      EscrowCreatedForOrderEvent.OutputObject
    >;

    "OrderCanceled(address,bytes32,uint256)": TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;
    OrderCanceled: TypedContractEvent<
      OrderCanceledEvent.InputTuple,
      OrderCanceledEvent.OutputTuple,
      OrderCanceledEvent.OutputObject
    >;

    "OrderFilled(bytes32,uint256,uint256)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
