/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchCreateEscrows"
      | "createEscrowDst"
      | "createEscrowSrc"
      | "emergencyWithdraw"
      | "escrowDstImplementation"
      | "escrowSrcImplementation"
      | "escrows"
      | "getEscrowAddress"
      | "getEscrowDstAddress"
      | "getEscrowSrcAddress"
      | "getFactoryStats"
      | "isEscrow"
      | "maximumTimelock"
      | "minimumSafetyDeposit"
      | "minimumTimelock"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setPaused"
      | "totalEscrowsCreated"
      | "totalValueLocked"
      | "transferOwnership"
      | "updateConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EscrowDstCreated"
      | "EscrowSrcCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchCreateEscrows",
    values: [
      BytesLike[],
      AddressLike[],
      BigNumberish[],
      AddressLike[],
      AddressLike[],
      BytesLike[],
      BigNumberish[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowDst",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrowSrc",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowDstImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowSrcImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getEscrowAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowDstAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowSrcAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEscrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSafetyDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "totalEscrowsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchCreateEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowDst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrowSrc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowDstImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowSrcImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowDstAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowSrcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSafetyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEscrowsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
}

export namespace EscrowDstCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    escrowAddress: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    escrowAddress: string,
    token: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    orderId: string;
    escrowAddress: string;
    token: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowSrcCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    escrowAddress: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    escrowAddress: string,
    token: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    orderId: string;
    escrowAddress: string;
    token: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowFactory extends BaseContract {
  contractName: "EscrowFactory";

  connect(runner?: ContractRunner | null): EscrowFactory;
  waitForDeployment(): Promise<this>;

  interface: EscrowFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchCreateEscrows: TypedContractMethod<
    [
      orderIds: BytesLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      depositors: AddressLike[],
      withdrawers: AddressLike[],
      secretHashes: BytesLike[],
      timelocks: BigNumberish[],
      isSource: boolean[]
    ],
    [string[]],
    "payable"
  >;

  createEscrowDst: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  createEscrowSrc: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  escrowDstImplementation: TypedContractMethod<[], [string], "view">;

  escrowSrcImplementation: TypedContractMethod<[], [string], "view">;

  escrows: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEscrowAddress: TypedContractMethod<[orderId: BytesLike], [string], "view">;

  getEscrowDstAddress: TypedContractMethod<
    [orderId: BytesLike],
    [string],
    "view"
  >;

  getEscrowSrcAddress: TypedContractMethod<
    [orderId: BytesLike],
    [string],
    "view"
  >;

  getFactoryStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string] & {
        _totalEscrowsCreated: bigint;
        _totalValueLocked: bigint;
        _minimumSafetyDeposit: bigint;
        _maximumTimelock: bigint;
        _minimumTimelock: bigint;
        _escrowSrcImplementation: string;
        _escrowDstImplementation: string;
      }
    ],
    "view"
  >;

  isEscrow: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maximumTimelock: TypedContractMethod<[], [bigint], "view">;

  minimumSafetyDeposit: TypedContractMethod<[], [bigint], "view">;

  minimumTimelock: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  totalEscrowsCreated: TypedContractMethod<[], [bigint], "view">;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [
      _minimumSafetyDeposit: BigNumberish,
      _maximumTimelock: BigNumberish,
      _minimumTimelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchCreateEscrows"
  ): TypedContractMethod<
    [
      orderIds: BytesLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      depositors: AddressLike[],
      withdrawers: AddressLike[],
      secretHashes: BytesLike[],
      timelocks: BigNumberish[],
      isSource: boolean[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEscrowDst"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEscrowSrc"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowDstImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrowSrcImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowDstAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEscrowSrcAddress"
  ): TypedContractMethod<[orderId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFactoryStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, string, string] & {
        _totalEscrowsCreated: bigint;
        _totalValueLocked: bigint;
        _minimumSafetyDeposit: bigint;
        _maximumTimelock: bigint;
        _minimumTimelock: bigint;
        _escrowSrcImplementation: string;
        _escrowDstImplementation: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEscrow"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maximumTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumSafetyDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalEscrowsCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      _minimumSafetyDeposit: BigNumberish,
      _maximumTimelock: BigNumberish,
      _minimumTimelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EscrowDstCreated"
  ): TypedContractEvent<
    EscrowDstCreatedEvent.InputTuple,
    EscrowDstCreatedEvent.OutputTuple,
    EscrowDstCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowSrcCreated"
  ): TypedContractEvent<
    EscrowSrcCreatedEvent.InputTuple,
    EscrowSrcCreatedEvent.OutputTuple,
    EscrowSrcCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EscrowDstCreated(bytes32,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      EscrowDstCreatedEvent.InputTuple,
      EscrowDstCreatedEvent.OutputTuple,
      EscrowDstCreatedEvent.OutputObject
    >;
    EscrowDstCreated: TypedContractEvent<
      EscrowDstCreatedEvent.InputTuple,
      EscrowDstCreatedEvent.OutputTuple,
      EscrowDstCreatedEvent.OutputObject
    >;

    "EscrowSrcCreated(bytes32,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      EscrowSrcCreatedEvent.InputTuple,
      EscrowSrcCreatedEvent.OutputTuple,
      EscrowSrcCreatedEvent.OutputObject
    >;
    EscrowSrcCreated: TypedContractEvent<
      EscrowSrcCreatedEvent.InputTuple,
      EscrowSrcCreatedEvent.OutputTuple,
      EscrowSrcCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
