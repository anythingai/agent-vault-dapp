/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDetails"
      | "initialize"
      | "publicWithdraw"
      | "redeem"
      | "refund"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EscrowCreated" | "Redeemed" | "Refunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    token: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    token: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    orderId: string;
    token: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    secret: BytesLike,
    redeemer: AddressLike
  ];
  export type OutputTuple = [orderId: string, secret: string, redeemer: string];
  export interface OutputObject {
    orderId: string;
    secret: string;
    redeemer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [orderId: BytesLike, refundee: AddressLike];
  export type OutputTuple = [orderId: string, refundee: string];
  export interface OutputObject {
    orderId: string;
    refundee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEscrow extends BaseContract {
  contractName: "IEscrow";

  connect(runner?: ContractRunner | null): IEscrow;
  waitForDeployment(): Promise<this>;

  interface: IEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDetails: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        orderId: string;
        token: string;
        amount: bigint;
        depositor: string;
        withdrawer: string;
        secretHash: string;
        timelock: bigint;
        safetyDeposit: bigint;
        isRedeemed: boolean;
        isRefunded: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish,
      safetyDeposit: BigNumberish
    ],
    [void],
    "payable"
  >;

  publicWithdraw: TypedContractMethod<
    [secret: BytesLike],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<[secret: BytesLike], [void], "nonpayable">;

  refund: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        orderId: string;
        token: string;
        amount: bigint;
        depositor: string;
        withdrawer: string;
        secretHash: string;
        timelock: bigint;
        safetyDeposit: bigint;
        isRedeemed: boolean;
        isRefunded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      orderId: BytesLike,
      token: AddressLike,
      amount: BigNumberish,
      depositor: AddressLike,
      withdrawer: AddressLike,
      secretHash: BytesLike,
      timelock: BigNumberish,
      safetyDeposit: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "publicWithdraw"
  ): TypedContractMethod<[secret: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[secret: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;

  filters: {
    "EscrowCreated(bytes32,address,uint256,bytes32,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "Redeemed(bytes32,bytes32,address)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "Refunded(bytes32,address)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
  };
}
